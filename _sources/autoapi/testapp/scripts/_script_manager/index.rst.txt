testapp.scripts._script_manager
===============================

.. py:module:: testapp.scripts._script_manager


Attributes
----------

.. autoapisummary::

   testapp.scripts._script_manager.script_dict


Classes
-------

.. autoapisummary::

   testapp.scripts._script_manager.ClassVisitor


Functions
---------

.. autoapisummary::

   testapp.scripts._script_manager.find_classes
   testapp.scripts._script_manager.get_test_scripts
   testapp.scripts._script_manager.get_classes
   testapp.scripts._script_manager.run_script
   testapp.scripts._script_manager.run_test_script_file


Module Contents
---------------

.. py:class:: ClassVisitor

   Bases: :py:obj:`ast.NodeVisitor`


   A node visitor base class that walks the abstract syntax tree and calls a
   visitor function for every node found.  This function may return a value
   which is forwarded by the `visit` method.

   This class is meant to be subclassed, with the subclass adding visitor
   methods.

   Per default the visitor functions for the nodes are ``'visit_'`` +
   class name of the node.  So a `TryFinally` node visit function would
   be `visit_TryFinally`.  This behavior can be changed by overriding
   the `visit` method.  If no visitor function exists for a node
   (return value `None`) the `generic_visit` visitor is used instead.

   Don't use the `NodeVisitor` if you want to apply changes to nodes during
   traversing.  For this a special visitor exists (`NodeTransformer`) that
   allows modifications.


   .. py:method:: visit_ClassDef(node)


.. py:function:: find_classes() -> List[Tuple[str, List[str]]]

   주어진 디렉토리 내의 모든 파이썬 파일에서 정의된 클래스를 찾습니다.
   :returns: 모듈 이름과 클래스 이름 리스트의 튜플 리스트
   :rtype: List[Tuple[str, List[str]]]


.. py:function:: get_test_scripts() -> dict[str, str]

   테스트 스크립트를 반환합니다.

   :returns: 테스트 스크립트 딕셔너리 {테스트 이름: 스크립트 절대 경로}
   :rtype: Dict[str, str]


.. py:function:: get_classes() -> List[object]

   CommandInterface를 구현한 클래스 객체들을 반환합니다.

   :returns: 클래스 객체 리스트
   :rtype: List[object]


.. py:function:: run_script(script_name: str, use_print: bool = False) -> bool

   주어진 스크립트를 실행합니다.

   :param script_name: 실행할 스크립트 이름
   :type script_name: str
   :param use_print: 콘솔 창에 출력할지 말지 결정
   :type use_print: bool

   :returns: 스크립트 실행 성공 여부
   :rtype: bool


.. py:function:: run_test_script_file(list_file: str)

   주어진 파일에 있는 테스트 스크립트를 순차적으로 실행합니다.

   :param list_file: 테스트 스크립트 목록 파일
   :type list_file: str


.. py:data:: script_dict

