my_logger.util_log
==================

.. py:module:: my_logger.util_log


Attributes
----------

.. autoapisummary::

   my_logger.util_log.LOG_FILE_PATH
   my_logger.util_log.LOG_MAX_SIZE


Classes
-------

.. autoapisummary::

   my_logger.util_log.MyRotatingFileHandler
   my_logger.util_log.CustomFormatter
   my_logger.util_log.Logger


Functions
---------

.. autoapisummary::

   my_logger.util_log.print_function_name


Module Contents
---------------

.. py:data:: LOG_FILE_PATH

.. py:data:: LOG_MAX_SIZE

.. py:function:: print_function_name(func)

   함수 실행 시 함수 이름을 출력하는 데코레이터 함수입니다.

   :param func: 데코레이트할 함수
   :type func: function

   :returns: 데코레이트된 함수
   :rtype: function


.. py:class:: MyRotatingFileHandler(filename, mode='a', maxBytes=0, backupCount=0, encoding=None, delay=False, errors=None)

   Bases: :py:obj:`logging.handlers.RotatingFileHandler`


   로그 파일이 회전될 때 파일 이름을 변경하는 기능을 추가한 RotatingFileHandler 클래스입니다.


   .. py:method:: doRollover()

      로그 파일 회전을 수행하고 백업 파일 이름을 변경합니다.



   .. py:method:: rename_backup_files()

      백업 파일의 이름을 현재 날짜와 시간으로 변경합니다.



   .. py:method:: get_bkup_file_name()

      백업 파일 이름을 생성합니다.

      :returns: 백업 파일 이름
      :rtype: str



   .. py:method:: is_already_bkup_file() -> bool

      백업 파일이 이미 존재하는지 확인합니다.

      :returns: 백업 파일이 이미 존재하면 True, 그렇지 않으면 False
      :rtype: bool



.. py:class:: CustomFormatter(fmt=None, datefmt=None, style='%', validate=True, *, defaults=None)

   Bases: :py:obj:`logging.Formatter`


   로그 메시지 형식을 커스터마이징하는 Formatter 클래스입니다.


   .. py:method:: format(record)

      로그 레코드를 지정된 형식으로 포맷합니다.

      :param record: 로그 레코드
      :type record: logging.LogRecord

      :returns: 포맷된 로그 메시지
      :rtype: str



.. py:class:: Logger

   싱글톤 패턴을 적용한 Logger 클래스입니다.


   .. py:attribute:: _instance
      :value: None



   .. py:method:: info(message)

      정보 로그 메시지를 기록합니다.

      :param message: 기록할 메시지
      :type message: str



   .. py:method:: debug(message)

      디버그 로그 메시지를 기록합니다.

      :param message: 기록할 메시지
      :type message: str



   .. py:method:: warning(message)

      경고 로그 메시지를 기록합니다.

      :param message: 기록할 메시지
      :type message: str



   .. py:method:: error(message)

      오류 로그 메시지를 기록합니다.

      :param message: 기록할 메시지
      :type message: str



   .. py:method:: log_with_class_func_name(level, message)

      클래스와 함수 이름을 포함하여 로그 메시지를 기록합니다.

      :param level: 로그 레벨
      :type level: int
      :param message: 기록할 메시지
      :type message: str



